/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Model;

import Carro.AgenteCarro;
import Carro.EstadoCarro;
import Data.ClassElemento;
import Data.ClassObjetoCarro;
import Data.TipoElemento;
import java.awt.*;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.image.BufferedImage;
import Logging.*;
import com.oracle.jrockit.jfr.ContentType;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author Mauricio
 */
public class Map extends javax.swing.JPanel {

    private BufferedImage imageAuto;
    private BufferedImage imageAuto90;
    private BufferedImage imageAuto180;
    private BufferedImage imageAuto270;
    private BufferedImage imagePeaton;
    private BufferedImage imageFondo;
    private BufferedImage imageCalle;
    private BufferedImage imageBahia;
    private BufferedImage imageVigilante;
    private int size;
    private int rectSize;
    private final Object keyList;
    private ClassElemento[][] listaElementos;
    private List<ClassElemento> listaAgentes;
    
    /**
     * Creates new form Map
     */
    public Map(int _size) 
    {
        size = _size;
        keyList = new Object();
        rectSize = 600/size;
        imageFondo = GetBufferedImage("Files\\background.png", this);
        imageAuto = GetBufferedImage("Files\\carred.png", this);
        imageAuto90 = GetBufferedImage("Files\\carred90.png", this);
        imageAuto180 = GetBufferedImage("Files\\carred180.png", this);
        imageAuto270 = GetBufferedImage("Files\\carred270.png", this);
        imagePeaton = GetBufferedImage("Files\\peatonCircle.png", this);
        imageCalle = GetBufferedImage("Files\\streetPlain.jpg", this);
        imageBahia = GetBufferedImage("Files\\parqueaderoPlain.jpg", this);
        imageVigilante = GetBufferedImage("Files\\vigilante.png", this);
        
        
        listaElementos = new ClassElemento[size][size];
        for(int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                listaElementos[i][j] = new ClassElemento("", TipoElemento.Ninguno, null);
            }
        }
        
        listaAgentes = new ArrayList<>();
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        synchronized(keyList)
        {
            Graphics2D g2d = (Graphics2D)g;
        
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    DibujarImagen (i, j, listaElementos[i][j], g2d);
                }
            }

            for (ClassElemento agente : listaAgentes)
            {     
                DibujarImagen (agente.posX, agente.posY, agente, g2d);
            }
        }
    }
    
    
    public void DibujarImagen(int coorX, int coorY,  ClassElemento elemento, Graphics2D g2d)
    {        
        Rectangle rec = new Rectangle(coorX * rectSize, coorY * rectSize, rectSize, rectSize);
     
        TexturePaint imagePaint;
        switch(elemento.tipo)
        {
            case Auto:
            {
                BufferedImage newImage;
                ClassObjetoCarro objCarro = (ClassObjetoCarro)elemento.parametro;
                
                if (objCarro.orientacion == EstadoCarro.Orientacion.derecha)
                {
                     //No hacer nada
                    newImage = imageAuto;
                    rec = new Rectangle(coorX * rectSize, coorY * rectSize + rectSize, rectSize * 4, rectSize * 2);
                }
                else if (objCarro.orientacion == EstadoCarro.Orientacion.abajo)
                {
                    newImage = imageAuto90;
                    rec = new Rectangle(coorX * rectSize + rectSize, coorY * rectSize, rectSize * 2, rectSize * 4);
                }
                else if (objCarro.orientacion == EstadoCarro.Orientacion.izquierda)
                {
                    newImage = imageAuto180;
                    rec = new Rectangle(coorX * rectSize, coorY * rectSize + rectSize, rectSize * 4, rectSize * 2);
                }
                else
                {
                    newImage = imageAuto270;
                    rec = new Rectangle(coorX * rectSize + rectSize, coorY * rectSize, rectSize * 2, rectSize * 4);
                }
                
                imagePaint = new TexturePaint(newImage, rec);
            }
            break;
            case Calle:
                imagePaint = new TexturePaint(imageCalle, rec);
                break;
            case Peaton:  
                imagePaint = new TexturePaint(imagePeaton, rec);
                break;
            case Bahia:
                imagePaint = new TexturePaint(imageBahia, rec);
                break;
            case Vigilante:
                imagePaint = new TexturePaint(imageVigilante, rec);
                break;
            default:
                imagePaint = new TexturePaint(imageFondo, rec);
                break;
        }
        
        if (elemento.tipo != TipoElemento.Ninguno)
        {
            g2d.setPaint(imagePaint);
            g2d.fill(rec);
        }
    }
    
    
    public static BufferedImage GetBufferedImage(String imageFile, Component c) 
    {
        Image image = c.getToolkit().getImage(imageFile);
        WaitForImage(image, c);
        BufferedImage bufferedImage = new BufferedImage(image.getWidth(c), image.getHeight(c), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = bufferedImage.createGraphics();
        g2d.drawImage(image, 0, 0, c);
        return(bufferedImage);
    }
    
    public static BufferedImage RotateImage(BufferedImage bufferedImage, int degrees)
    {
        if (degrees == 0 || degrees == 180)
        {
            int width = bufferedImage.getWidth();
            int height = bufferedImage.getHeight();
            
            BufferedImage scaledBI = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB );
            Graphics2D g = scaledBI.createGraphics();

            g.rotate(Math.toRadians( degrees ), width, height);
            g.drawImage(bufferedImage, 0, 0, width, height, null);
            g.dispose();
            return scaledBI;
        }
        else
        {
            int width = bufferedImage.getHeight();
            int height = bufferedImage.getWidth();
            
            BufferedImage scaledBI = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB );
            Graphics2D g = scaledBI.createGraphics();

            g.rotate(Math.toRadians( degrees ), width, height);
            g.drawImage(bufferedImage, 0, 0, width, height, null);
            g.dispose();
            return scaledBI;
        }
    }
    
        
    public static boolean WaitForImage(Image image, Component c) 
    {
        MediaTracker tracker = new MediaTracker(c);
        tracker.addImage(image, 0);
        try
        {
            tracker.waitForAll();
        } 
        catch(InterruptedException ie) 
        {
            ClassLogger.LogMsg("Excepcion no controlada en la aplicacion: " + ie.getMessage(), LogLevel.ERROR);
        }
        return(!tracker.isErrorAny());
    }
    
        
    public void AbrirVentana()
    {
        String title = this.getClass().getName(); 
        Color bgColor = Color.white;
        OpenInJFrame(this, rectSize * size + 100, rectSize * size + 100, title, bgColor);
    }
    
    
    private JFrame OpenInJFrame(Container content, int width, int height, String title, Color bgColor) {
        JFrame frame = new JFrame(title);
        frame.setBackground(bgColor);
        content.setBackground(bgColor);
        frame.setSize(width, height);
        frame.setContentPane(content);
        frame.addWindowListener(new ExitListener());
        frame.setVisible(true);
        return(frame);
    }
    
    public static class ExitListener extends WindowAdapter 
    {
        @Override
        public void windowClosing(WindowEvent event) {
            System.exit(0);
        }
    }
    
    public void RedibujarMapa(ClassElemento[][] _listaElementos, List<ClassElemento> _listaAgentes)
    {
        synchronized(keyList)
        {
            listaElementos = _listaElementos;
            listaAgentes = _listaAgentes;
        }
        
        repaint();
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
